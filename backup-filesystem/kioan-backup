#!/usr/bin/env bash

VER="0.1"
AUTHOR="kioan <https://github.com/kioan>"
ABOUT="$(basename ${0}) v${VER}, by ${AUTHOR}"

Usage() {
    echo "Usage:"
    echo "   $(basename ${0}) -c <config file> -d <backup destination directory>"
}

Help() {
    echo ${ABOUT}
    echo "Script for creating tar.gz backups of multiple filesystem paths."
    echo ""
    Usage
    echo ""
    echo "Options:"
    echo "  -h     print help and exit"
    echo ""
    echo "Description:"
    echo "  The backup file will be stored inside the specified <destination directory>"
    echo "  The name of the backup will contain the <hostname> and current datetime."
    echo ""
    echo "Configuration file:"
    echo "   The configuration file should contain one path per line. Paths can be files or directories."
    echo "   Paths can be absolute or relative. Wildcard characters asterisk (*) or question mark (?) are accepted."
}

while getopts c:d:h flag; do
    case "${flag}" in
    c) # configuration file
        CONF_FILE=${OPTARG}
        ;;
    d) # Backup destination directory
        BACKUP_DIR=${OPTARG}
        ;;
    h)
        Help
        exit
        ;;
    \?) # Invalid option
        echo "Error: Invalid option"
        exit
        ;;
    esac
done
shift "$((OPTIND - 1))"

if [ -z ${BACKUP_DIR} ] || [ -z "${CONF_FILE}" ]; then
    echo -e "Error: Missing -c and/or -d opernad" >&2
    Usage
    echo "Try \`$(basename ${0}) -h\` for more information"
    exit 1
fi

# Exit if destination does not exist
if [ ! -d ${BACKUP_DIR} ]; then
    echo "Error: Directory ${BACKUP_DIR} does not exist" >&2
    exit 1
fi

DateStart=$(date -u +%s)


set -o errexit      # abort on nonzero exitstatus
set -o nounset      # abort on unbound variable
set -o pipefail     # don't hide errors within pipes


# Create archive filename.
now=$(date +"%Y-%m-%d_T%H%M%S")
#hostname=$(uname -n)
hostname=$(hostname -s)
archive_file="${hostname}_${now}.tar"

echo "Backup parameters"
echo "  Configuration file: ${CONF_FILE}"
echo "  Backup destination: ${BACKUP_DIR}"
echo ""

if ! RUN_GZ=$(command -v pigz) &> /dev/null     # If can not use pigz
then
    RUN_GZ=$(command -v gzip)                   # use gzip instead
fi

echo "Archiving"
while IFS= read -r line || [ -n "$line" ]; do
    [[ $line =~ ^[[:blank:]]*\# ]] && continue  # Ignore comments strting with #
    [[ $line =~ ^[[:blank:]]*$ ]] && continue   # Ignore empty lines
   
    shopt -s nullglob                           # Allow filename patterns which match no files to expand to a null string
    for file in $line; do
        if [[ -r $file || -d $file ]]; then     # If file exists and is readable or if directory exists
            echo "  [APPEND] $file"
            tar rf $BACKUP_DIR/$archive_file $file 2> >(grep -v "Removing leading" >&2)
        else
            echo "  [ SKIP ] $file"
        fi
    done
    # echo
done < "$CONF_FILE"
echo ""


echo "Compressing"
if [ ! -f "$BACKUP_DIR/$archive_file" ]; then
    echo "  Nothing to compress. No tar archive has been created." >&2
    echo ""
else
    size_tar=$(du -b --apparent-size $BACKUP_DIR/$archive_file | awk '{print $1}')
    size_tar_h=$(du -h --apparent-size $BACKUP_DIR/$archive_file | awk '{print $1}')

    # Compress
    $RUN_GZ $BACKUP_DIR/$archive_file

    size_gz=$(du -b --apparent-size $BACKUP_DIR/$archive_file.gz | awk '{print $1}')
    size_gz_h=$(du -h --apparent-size $BACKUP_DIR/$archive_file.gz | awk '{print $1}')

    size_reduction=$(awk "BEGIN {printf \"%.1f%%\",100*(1-$size_gz/$size_tar)}")

    echo "  Original size  : $size_tar_h"
    echo "  Compressed size: $size_gz_h"
    echo "  Size reduction : $size_reduction"
    echo ""

    echo "Output file: $BACKUP_DIR/$archive_file.gz"
    echo ""
fi

DateEnd=$(date -u +%s)

echo "Execution report"
echo "  Start  :" $(date -d@$DateStart +'%Y-%m-%d %H:%M:%S %z')
echo "  End    :" $(date -d@$DateEnd +'%Y-%m-%d %H:%M:%S %z')
echo "  Elapsed:" $(date -u -d "0 $DateEnd seconds - $DateStart seconds" +%H:%M:%S)
